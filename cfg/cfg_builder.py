"""
This module processes all DOT format graphs of a binary to compile
them into a NetworkX graph with nodes as basic blocks
"""

import os
import networkx as nx
from networkx.drawing.nx_pydot import read_dot
import pydot


class CFGBuilder(object):
    """
    This class' instances manage the core functionality of this module
    """
    
    def __init__(self, dot_files_path):
        self.func_graph_dict = {}
        for file in os.listdir(dot_files_path):

            # read each graph and map the function name to graph
            g = nx.DiGraph(read_dot(
                os.path.join(dot_files_path, file)
            ))

            func_name = file[:-4]  # skip '.dot'
            self.func_graph_dict[func_name] = g

            print(f"{func_name} mapped to its graph")
    
    def build_basic_blocks(self, graph):
        for node in graph.nodes():
            assert len(graph.nodes[node].keys) == 1  # only 'label'
            name, inst = self.parse_node_data(graph.nodes[node]['label'])
            graph.nodes[node].pop('label', None)

            # add name and instruction to the node
            graph.nodes[node]['name'] = name
            graph.nodes[node]['inst'] = inst

    def parse_node_data(self, data):
        heading_split = data.split(':')
        name = heading_split[0][1:]  # select heading and skip first "

        return name, inst