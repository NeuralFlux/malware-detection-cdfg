"""
This module processes the NetworkX graphs and their execution traces
to extract custom features for learning
"""

from queue import Queue

from nltk import ngrams


class FeatureExtractor(object):
    """
    This class manages the core functionality of the module
    Can extract:
      - ngrams of execution traces
      - {extendable}
    """

    def __init__(self, func_graph_dict: dict, n_gram: int = 3) -> None:
        """
        Collect the execution traces and parameters for further
        processing
        """
        self.func_graph_dict = func_graph_dict
        self.N = n_gram
        assert n_gram > 1  # enforce at least bigram

        self.build_ngrams()

    def build_ngrams(self, replace_traces: bool = True) -> None:
        """
        Generate ngrams from execution traces of graphs
        """

        for k, v in self.func_graph_dict.items():
            ngram_list = []  # one list for all traces of one graph
            for ex_path in v[1]:
                # buffer of instructions rather than loading all
                # eases memory usage
                inst_buffer = []

                idx = 0
                while idx < len(ex_path):
                    # add instructions from nodes such that they are
                    # at least N in number
                    while len(inst_buffer) < self.N:
                        node = ex_path[idx]
                        inst_buffer.extend(v[0].nodes[node]['insts'])
                        idx += 1
                    
                    # build ngrams over the instruction buffer
                    ngram_list.extend(
                        ngrams(inst_buffer, self.N)
                    )

                    # preserve last (N-1) instructions as their ngrams
                    # with upcoming instructions are pending
                    inst_buffer = inst_buffer[:][-(self.N - 1):]
            
            # OPTIONAL: replace ex trace with features
            if replace_traces:
                self.func_graph_dict[k] = (
                    self.func_graph_dict[k][0],
                    ngram_list
                )
