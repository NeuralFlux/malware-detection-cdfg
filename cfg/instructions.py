"""
This module contains the classes required for instruction and
operand parsing
"""

from opcodes import OpCodeDict


class NGram(object):

    # TODO generalise for n-grams (currently only for trigrams)
    def __init__(self, insts):
        self.N = len(insts)
        self.insts = tuple(insts)
        self.dependencies = [0, 0]  # dependency on inst 1
        self.invalid_flag = False

        # mark invalid if undefined inst
        for inst in self.insts:
            if inst.opcode == -1:
                self.invalid_flag = True
                break

    def __repr__(self):
        inst_str = '-'.join(self.insts)
        dep_str = str(
            self.dependencies[0] * 4 + self.dependencies[1]
        )

        return inst_str + '-' + dep_str


class Inst(object):

    def __init__(self, inst_string):
        split_array = inst_string.split()
        self.inst = split_array[0]
        try:
            self.opcode = OpCodeDict.TABLE[self.inst]
        except KeyError:
            # print(f"OPCODEERR: {self.inst}")
            self.opcode = -1
    
    def __repr__(self):
        return self.inst
    
    def __eq__(self, o):
        return self.opcode == o.opcode


class Operand(object):
    pass