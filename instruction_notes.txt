Reference https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-sdm-combined-volumes-2a-2b-2c-and-2d-instruction-set-reference-a-z.html
`*` after an operand implies that it is optional
`~` in the description of an instruction means that at least one of the possible interpretations of the instruction has been left out due to complexity

===================
ADD dest, src
dest = dest + src
===================

===================
SUB dest, src
dest = dest - src
===================

===================
XOR dest, src
dest = dest XOR src
===================

===================
SHR dest, src
Shift `src` bits to right on `dest`
===================

===================
SHL dest, src
Shift `src` bits to left on `dest`
===================

===================
MOV dest, src
copy `src` to `dest`
===================

===================
MOVZX dest, src
copy `src` to `dest` and zero-extend it
===================

===================
LEA dest, complex_src
Evaluate `complex_src` and store in `dest`
NOTE - `complex_src` here means multiple registers/constants might be involved in the expression
===================

===================
IMUL dest, src1, src2*
dest = dest * src1
dest = src1 * src2
~ One-operand
===================

===================
CMP src1, src2
Compare 2 sources and store difference in temp
===================

===================
PUSH src
Decrements the stack pointer and then stores `src` on the top of the stack
===================

===================
JMP dest
Jumps to `dest` in instructions
~ task-switches
===================

===================
POP dest
Pop the stack to load that value into `dest` and increment stack pointer
===================